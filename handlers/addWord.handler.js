import { translateWords } from './utils/translateWortd.js';
import { saveLessonWithWords } from '../services/lessonService.js';
import { User } from '../models/user.js';

export const callbackAddWord = async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) return ctx.reply('–ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ—á–∫–∏ /start');

  ctx.session.step = 'adding_words';
  return ctx.reply(
    `‚úçÔ∏è –í–≤–µ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç–æ—á–∫–∞–º–∏:\n\n` +
      `–ü—Ä–∏–º–µ—Ä:\n<b>go out. stand up. do the chores</b>\n\n` +
      `üí°<i>–°–æ–≤–µ—Ç: —á–µ–º —Ç–æ—á–Ω–µ–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ–µ –±—É–¥—É—Ç —Ñ—Ä–∞–∑—ã, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.\n\n</i>` +
      `<i>–ù–∞–ø—Ä–∏–º–µ—Ä:\nget down ‚û°Ô∏è get down to business
 carry ‚û°Ô∏è carry on</i>` +
      `\n\n<i>Ô∏è‚ùóÔ∏è–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç LexiBuddy: –µ—Å–ª–∏ —Ç—ã —É—á–∏—à—å –¥–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ - –Ω–µ –¥–æ–±–∞–≤–ª—è–π –µ–≥–æ –≤ –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: –ª—É—á—à–µ –≤–Ω–æ—Å–∏ –ø–æ 4-5 –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑—ã –≤ –¥–µ–Ω—å –∏ —Å—Ä–∞–∑—É –∂–µ —Ç—Ä–µ–Ω–∏—Ä—É–π –∏—Ö –≤ 3-4 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –¢–∞–∫ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –∞ —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –∏–∑-–∑–∞ –±–æ–ª—å—à–∏—Ö –∏ —Ç—è–∂–µ–ª–æ —É—Å–≤–∞–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–æ–≤–æ–π –ª–µ–∫—Å–∏–∫–∏!</i>`,
    { parse_mode: 'HTML' }
  );
};

export const handleAddWordTextMessage = async (ctx) => {
  const telegramId = ctx.from.id;
  const step = ctx.session.step;

  if (step === 'adding_words') {
    const input = ctx.message.text;
    const items = input
      .split('.')
      .map((w) => w.trim())
      .filter(Boolean);

    if (items.length === 0) {
      return ctx.reply('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –†–∞–∑–¥–µ–ª—è–π –∏—Ö —Ç–æ—á–∫–∞–º–∏.');
    }

    await ctx.reply('‚è≥ Hold on‚Ä¶ AI just needs a sec to work its magic! üßö‚ú®');

    try {
      const translations = await translateWords(items);

      ctx.session.temp = ctx.session.temp || {};
      ctx.session.temp.words = translations;

      ctx.session.step = 'naming_lesson';

      return ctx.reply(
        'üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: Phrasal Verbs 1'
      );
    } catch (err) {
      console.error('GPT Error:', err, 'time drop:', Date.now());
      return ctx.reply(
        'Oops! Our AI‚Äôs feeling a bit tired and needs a short break üí§ Please try again in a little while üôè'
      );
    }
  }

  if (step === 'naming_lesson') {
    const lessonName = ctx.message.text.trim();
    if (!lessonName) {
      return ctx.reply('‚ö†Ô∏è –ò–º—è —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞.');
    }

    const words = ctx.session.temp.words;
    await saveLessonWithWords(telegramId, words, lessonName);

    ctx.session.step = null;
    ctx.session.temp = {};

    return ctx.reply(
      '‚úÖ Done!\n\n' +
        words.map((w) => `${w.en} ‚Äî ${w.ru} (${w.syn})`).join('\n'),
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', callback_data: 'train' }],
          ],
        },
      }
    );
  }

  return ctx.reply(
    '‚ùì–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª–∞‚Ä¶ –ù–∞–∂–º–∏ /start –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ üí´'
  );
};
