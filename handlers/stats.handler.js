import { User } from '../models/user.js';
import { getUserLevelInfo } from '../utils/userStats/userStats.js';
import { getProgressBar } from '../utils/userStats/progressBar.js';
import { InlineKeyboard } from 'grammy';
import { ACHIEVEMENTS } from '../utils/userStats/achivements/achievements.js';
import { THAMB_UP_ONE_VIDEO, THAMB_UP_TWO_VIDEO } from '../utils/media.js';

export async function callbackStats(ctx) {
  try {
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });
    if (!user) {
      return ctx.reply(
        '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å /start.'
      );
    }

    const levelInfo = getUserLevelInfo(user);

    if (!levelInfo) {
      return ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòÖ');
    }

    const trainingsCount = user.trainings.length;
    const wordsCount = user.words.length;
    const lessonsCount = user.lessons.length;
    const passedTrainings = user.trainings.filter((t) => t.attempts > 0);
    const passedTrainingsCount = passedTrainings.length;
    let achievementList;

    if (user.achievements.length > 0) {
      const found = ACHIEVEMENTS.filter((a) =>
        user.achievements.includes(a.id)
      );
      achievementList = found
        .map((ach) => `   ‚û§  <b>${ach.name}</b> ‚Äî ${ach.description}`)
        .join('\n');
    } else {
      achievementList = '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üòÖ';
    }

    let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n`;
    message += `üèÜ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>${levelInfo.level} ${levelInfo.title}</b>\n`;
    message += `- –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: <b>${wordsCount}</b>\n`;
    message += `- –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: <b>${lessonsCount}</b>\n`;
    message += `- –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>${trainingsCount}</b>\n`;
    message += `- –ü—Ä–æ–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>${passedTrainingsCount}</b>\n`;
    message += `üéØ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ: <b>${levelInfo.accuracy}%</b>\n\n`;

    message += `üéñ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:<blockquote>${achievementList}</blockquote>\n\n`;

    message += getProgressBar(levelInfo.trainingsInLevel);
    message += `üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏ –ø—É—Å—Ç—å —Å–∏–ª–∞ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π!`;

    const keyboard = new InlineKeyboard()
      .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞', 'add_word')
      .text('üß† –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'train')
      .row()
      .text('üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤', 'words');

    return ctx.replyWithVideo(THAMB_UP_TWO_VIDEO, {
      caption: message,
      reply_markup: keyboard,
      parse_mode: 'HTML',
    });
  } catch (err) {
    console.error('Error in stats:', err);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
}
